# name: Terraform Deploy

# on:
#   workflow_call:
#     inputs:
#       terraform_version:
#         required: true
#         type: string
#       working_directory:
#         required: true
#         type: string
#     secrets:
#       AWS_ACCESS_KEY_ID:
#         required: true
#       AWS_SECRET_ACCESS_KEY:
#         required: true
#       AWS_SESSION_TOKEN:
#         required: true

# jobs:
#   terraform:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: ${{ inputs.terraform_version }}

#       - name: Initialize Terraform
#         run: terraform init
#         working-directory: ${{ inputs.working_directory }}

#       - name: Validate Terraform
#         run: terraform validate
#         working-directory: ${{ inputs.working_directory }}

#       - name: Plan Terraform
#         run: terraform plan -out=tfplan
#         working-directory: ${{ inputs.working_directory }}
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

#       - name: Apply Terraform Plan
#         run: terraform apply -auto-approve tfplan
#         working-directory: ${{ inputs.working_directory }}
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}


name: Terraform Deploy

on:
  workflow_call:
    inputs:
      terraform_version:
        required: true
        type: string
      working_directory:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN:
        required: true
  workflow_dispatch:
    inputs:
      approve_apply:
        description: 'Approve to apply Terraform plan'
        required: true
        default: 'no'
      approve_destroy:
        description: 'Approve to destroy Terraform infrastructure'
        required: true
        default: 'no'

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: terraform-approval  # Define environment for the entire job

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ inputs.working_directory }}

      - name: Validate Terraform
        run: terraform validate
        working-directory: ${{ inputs.working_directory }}

      - name: Plan Terraform
        run: terraform plan -out=tfplan
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      # Manual approval before applying the plan
      - name: Wait for Apply Approval
        if: ${{ github.event.inputs.approve_apply == 'yes' }}
        run: echo "Waiting for manual approval to apply Terraform plan."

      - name: Apply Terraform Plan
        if: ${{ github.event.inputs.approve_apply == 'yes' }}
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      # Manual approval before destroying the infrastructure
      - name: Wait for Destroy Approval
        if: ${{ github.event.inputs.approve_destroy == 'yes' }}
        run: echo "Waiting for manual approval to destroy Terraform infrastructure."

      - name: Destroy Terraform Infrastructure
        if: ${{ github.event.inputs.approve_destroy == 'yes' }}
        run: terraform destroy -auto-approve
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
